data_girls.girls AgeDeterioration
if (!mainScript.chance(2 * num) && this.trait != traits._trait._type.Live_fast)
{
	return;
}
if (!mainScript.chance(4 * num) && this.trait == traits._trait._type.Live_fast)
{
	return;
}

data_girls.girls RecalcFanAppeal
if (this.trait != traits._trait._type.Trendy)
{
	if (fan.age == resources.fanType.adult)
	{
		num2 /= 3.37f;
	}
	else
	{
		num2 /= 3.66f;
	}
}
else if (fan.age == resources.fanType.adult)
{
	num2 /= 6.74f;
}
else
{
	num2 /= 1.83f;
}

data_girls.girls GetPartnerString
if (!this.Is_AOC())
{
}

data_girls GetAverageParam
float num = 0f;
float num2 = 0f;
bool loner = false;
foreach (data_girls.girls girls in Girls)
{
	if (girls != null)
	{
		num += girls.getParam(Type).val;
		int ind = 0;
		using (List<SEvent_Tour.tour>.Enumerator enumerator2 = SEvent_Tour.Tours.GetEnumerator())
		{
			while (enumerator2.MoveNext())
			{
				if (enumerator2.Current.Status == SEvent_Tour.tour._status.normal)
				{
					ind++;
				}
			}
		}
		using (List<SEvent_SSK._SSK>.Enumerator enumerator3 = SEvent_SSK.Elections.GetEnumerator())
		{
			while (enumerator3.MoveNext())
			{
				if (enumerator3.Current.Status == SEvent_Tour.tour._status.normal)
				{
					ind++;
				}
			}
		}
		using (List<SEvent_Concerts._concert>.Enumerator enumerator4 = SEvent_Concerts.Concerts.GetEnumerator())
		{
			while (enumerator4.MoveNext())
			{
				if (enumerator4.Current.Status == SEvent_Tour.tour._status.normal)
				{
					ind++;
				}
			}
		}
		if (girls != null && girls.trait == traits._trait._type.Anxiety && data_girls.IsStatParam(Type) && ind > 0)
		{
			num -= 10f;
		}
		if (girls != null && girls.trait == traits._trait._type.Clumsy && Type == data_girls._paramType.dance)
		{
			num -= 30f;
		}
		if (girls != null && girls.trait == traits._trait._type.Clumsy && Type == data_girls._paramType.funny)
		{
			num += 30f;
		}
		if (girls != null && girls.trait == traits._trait._type.Worrier && resources.GetScandalPointsTotal() > 0L && data_girls.IsStatParam(Type))
		{
			num -= 20f;
		}
		singles._single single = singles.GetLatestReleasedSingle(false, girls.GetGroup());
		singles._single single2 = singles.GetLatestReleasedSingle(false, Groups.GetMainGroup());
		singles._single single3 = null;
		if (single == null)
		{
			single = single2;
		}
		if (single != null)
		{
			if (single.ReleaseData.ReleaseDate > single2.ReleaseData.ReleaseDate)
			{
				single3 = single;
			}
			else if (single.ReleaseData.ReleaseDate < single2.ReleaseData.ReleaseDate)
			{
				single3 = single2;
			}
			else if (single.ReleaseData.Sales > single2.ReleaseData.Sales)
			{
				single3 = single;
			}
			else
			{
				single3 = single2;
			}
		}
		if (single != null && girls != null && girls.trait == traits._trait._type.Complacent && (girls == single.GetCenter() || girls == single2.GetCenter()) && (Type == data_girls._paramType.vocal || Type == data_girls._paramType.dance))
		{
			num -= 20f;
		}
		if (single3 != null && girls != null && (staticVars.dateTime - single3.ReleaseData.ReleaseDate).Days >= staticVars.dateTime.Day && single3.ReleaseData.Chart_Position != 1 && data_girls.IsStatParam(Type))
		{
			if (girls.trait == traits._trait._type.Defeatist)
			{
				num -= 20f;
			}
			else if (girls.trait == traits._trait._type.Underdog)
			{
				num += 20f;
			}
		}
		if (girls != null && girls.trait == traits._trait._type.Lone_Wolf)
		{
			loner = true;
		}
		num2 += 1f;
	}
}
if (num < 1f)
{
	num = 1f;
}
if (num2 == 0f)
{
	return 0f;
}
if (num2 == 1f && loner)
{
	num += 40f;
}
return num / num2;

data_girls.girls UpdateDatingStatus
if (mainScript.chance(2) && !this.DatingData.Is_Partner_Status_Known)
{
	bool leaker = false;
	foreach (data_girls.girls girls in data_girls.GetActiveGirls(null))
	{
		if (girls != this && girls.trait == traits._trait._type.Indiscreet)
		{
			leaker = true;
		}
	}
	if (leaker)
	{
		if (policies.GetSelectedPolicyValue(policies._type.dating).Value == policies._value.dating_forbidden)
		{
			NotificationManager.AddNotification(Language.Insert("IDOL__OUTSIDE_LEAK_SCANDAL", new string[]
			{
				this.GetName(true)
			}), mainScript.red32, NotificationManager._notification._type.idol_relationship_change);
			this.getParam(data_girls._paramType.scandalPoints).add(1f, false);
		}
		else
		{
			NotificationManager.AddNotification(Language.Insert("IDOL__OUTSIDE_LEAK", new string[]
			{
				this.GetName(true)
			}), mainScript.red32, NotificationManager._notification._type.idol_relationship_change);
		}
		this.getParam(data_girls._paramType.mentalStamina).add(-30f, false);
		this.DatingData.Is_Partner_Status_Known = true;
		this.DatingData.Partner_Status_Known_To_Player = this.DatingData.Partner_Status;
		return;
	}
}

Relationships._relationship CheckDating
if (mainScript.chance(2) && !this.IsRelationshipKnown())
{
	bool leaker = false;
	foreach (data_girls.girls girls in data_girls.GetActiveGirls(null))
	{
		if (girls != this.Girls[0] && girls != this.Girls[1] && girls.trait == traits._trait._type.Indiscreet)
		{
			leaker = true;
		}
	}
	if (leaker)
	{
		if (policies.GetSelectedPolicyValue(policies._type.dating).Value == policies._value.dating_forbidden)
		{
			this.Girls[0].getParam(data_girls._paramType.scandalPoints).add(1f, false);
			this.Girls[1].getParam(data_girls._paramType.scandalPoints).add(1f, false);
			NotificationManager.AddNotification(Language.Insert("IDOL__INSIDE_LEAK_SCANDAL", new string[]
			{
				this.Girls[0].GetName(true),
				this.Girls[1].GetName(true)
			}), mainScript.red32, NotificationManager._notification._type.idol_relationship_change);
		}
		else
		{
			NotificationManager.AddNotification(Language.Insert("IDOL__INSIDE_LEAK", new string[]
			{
				this.Girls[0].GetName(true),
				this.Girls[1].GetName(true)
			}), mainScript.red32, NotificationManager._notification._type.idol_relationship_change);
		}
		this.Girls[0].getParam(data_girls._paramType.mentalStamina).add(-30f, false);
		this.Girls[1].getParam(data_girls._paramType.mentalStamina).add(-30f, false);
		this.Girls[0].DatingData.Is_Partner_Status_Known = true;
		this.Girls[1].DatingData.Is_Partner_Status_Known = true;
		this.Girls[0].DatingData.Partner_Status_Known_To_Player = data_girls.girls._dating_data._partner_status.taken_idol;
		this.Girls[1].DatingData.Partner_Status_Known_To_Player = data_girls.girls._dating_data._partner_status.taken_idol;
	}
}

Relationships._relationship BreakUp
this.Girls[0].DatingData.Is_Partner_Status_Known = false;
this.Girls[1].DatingData.Is_Partner_Status_Known = false;

Birthday_Popup DoParam
if (this.Girl.trait == traits._trait._type.Live_fast)
{
	num3 = num * (0.95f - 0.005f * (float)num2);
}
else
{
	num3 = num * (0.975f - 0.0025f * (float)num2);
}

business._proposal GetGirlCoeff
if(this.type == business._type.photoshoot && _girl.trait == traits._trait._type.Photogenic)
{
	num = num + 1f;
}

business._proposal GetGirlCoeff
int ind = 0;
using (List<SEvent_Tour.tour>.Enumerator enumerator = SEvent_Tour.Tours.GetEnumerator())
{
	while (enumerator.MoveNext())
	{
		if (enumerator.Current.Status == SEvent_Tour.tour._status.normal)
		{
			ind++;
		}
	}
}
using (List<SEvent_SSK._SSK>.Enumerator enumerator2 = SEvent_SSK.Elections.GetEnumerator())
{
	while (enumerator2.MoveNext())
	{
		if (enumerator2.Current.Status == SEvent_Tour.tour._status.normal)
		{
			ind++;
		}
	}
}
using (List<SEvent_Concerts._concert>.Enumerator enumerator3 = SEvent_Concerts.Concerts.GetEnumerator())
{
	while (enumerator3.MoveNext())
	{
		if (enumerator3.Current.Status == SEvent_Tour.tour._status.normal)
		{
			ind++;
		}
	}
}
if (_girl != null && _girl.trait == traits._trait._type.Anxiety && data_girls.IsStatParam(this.skill) && ind > 0)
{
	val -= 10f;
}
if (_girl != null && _girl.trait == traits._trait._type.Clumsy && this.skill == data_girls._paramType.funny)
{
	val += 30f;
}
if (_girl != null && _girl.trait == traits._trait._type.Worrier && resources.GetScandalPointsTotal() > 0L && data_girls.IsStatParam(this.skill))
{
	val -= 20f;
}
singles._single single = singles.GetLatestReleasedSingle(false, _girl.GetGroup());
singles._single single2 = singles.GetLatestReleasedSingle(false, Groups.GetMainGroup());
singles._single single3 = null;
if (single == null)
{
	single = single2;
}
if (single != null)
{
	if (single.ReleaseData.ReleaseDate > single2.ReleaseData.ReleaseDate)
	{
		single3 = single;
	}
	else if (single.ReleaseData.ReleaseDate < single2.ReleaseData.ReleaseDate)
	{
		single3 = single2;
	}
	else if (single.ReleaseData.Sales > single2.ReleaseData.Sales)
	{
		single3 = single;
	}
	else
	{
		single3 = single2;
	}
}
if (single3 != null && _girl != null && (staticVars.dateTime - single3.ReleaseData.ReleaseDate).Days >= staticVars.dateTime.Day && single3.ReleaseData.Chart_Position != 1 && data_girls.IsStatParam(this.skill))
{
	if (_girl.trait == traits._trait._type.Defeatist)
	{
		val -= 20f;
	}
	else if (_girl.trait == traits._trait._type.Underdog)
	{
		val += 20f;
	}
}
if (val < 1f)
{
	val = 1f;
}

Relationships._relationship Initialize
int age = this.Girls[0].GetAge();
int age2 = this.Girls[1].GetAge();
if (this.Girls[0].trait == traits._trait._type.Maternal && age > age2)
{
	this.Dynamic = Relationships._relationship._dynamic.positive;
}
else if (this.Girls[1].trait == traits._trait._type.Maternal && age2 > age)
{
	this.Dynamic = Relationships._relationship._dynamic.positive;
}
else if (this.Girls[0].trait == traits._trait._type.Precocious && age < age2)
{
	this.Dynamic = Relationships._relationship._dynamic.positive;
}
else if (this.Girls[1].trait == traits._trait._type.Precocious && age2 < age)
{
	this.Dynamic = Relationships._relationship._dynamic.positive;
}
else
{
	this.Dynamic = (Relationships._relationship._dynamic)UnityEngine.Random.Range(1, 4);
}

Relationships Do_Dynamic
if (relationship.Dynamic == Relationships._relationship._dynamic.positive)
{
	relationship.Add(0.1f);
	if (relationship.Girls[0].trait == traits._trait._type.Maternal && relationship.Girls[0].GetAge() > relationship.Girls[1].GetAge())
	{
		relationship.Add(0.3f);
	}
	else if (relationship.Girls[1].trait == traits._trait._type.Maternal && relationship.Girls[1].GetAge() > relationship.Girls[0].GetAge())
	{
		relationship.Add(0.3f);
	}
	if (relationship.Girls[0].trait == traits._trait._type.Precocious && relationship.Girls[0].GetAge() < relationship.Girls[1].GetAge())
	{
		relationship.Add(0.3f);
	}
	else if (relationship.Girls[1].trait == traits._trait._type.Precocious && relationship.Girls[1].GetAge() < relationship.Girls[0].GetAge())
	{
		relationship.Add(0.3f);
	}
}
else if (relationship.Dynamic == Relationships._relationship._dynamic.negative)
{
	relationship.Add(-0.1f);
}
singles._single single = singles.GetLatestReleasedSingle(false, relationship.Girls[0].GetGroup());
singles._single single2 = singles.GetLatestReleasedSingle(false, relationship.Girls[1].GetGroup());
singles._single single3 = singles.GetLatestReleasedSingle(false, Groups.GetMainGroup());
if (single == null)
{
	single = single3;
}
if (single2 == null)
{
	single2 = single3;
}
if (single != null)
{
	if ((single.GetCenter() == relationship.Girls[0] || single3.GetCenter() == relationship.Girls[0]) && relationship.Girls[0].trait == traits._trait._type.Arrogant)
	{
		relationship.Add(-0.5f);
	}
}
else if (single2 != null && (single2.GetCenter() == relationship.Girls[1] || single3.GetCenter() == relationship.Girls[1]) && relationship.Girls[1].trait == traits._trait._type.Arrogant)
{
	relationship.Add(-0.5f);
}

Relationships._relationship Recalc
float num4 = (float)num / (float)(num + num2);
if ((this.Girls[0].trait == traits._trait._type.Forgiving || this.Girls[1].trait == traits._trait._type.Forgiving) && num4 < 0.5f)
{
	num4 = 0.5f;
}
this.Ratio = num4;

Shows._show AddCastParam
foreach (data_girls.girls girls in girlList)
{
	if (girls != null && girls.trait == traits._trait._type.Meme_queen)
	{
		Shows._param._media_type? media_type = this.medium.media_type;
		Shows._param._media_type media_type2 = Shows._param._media_type.internet;
		if (media_type.GetValueOrDefault() == media_type2 & media_type != null)
		{
			param.val += 10f;
		}
	}
}

Show_Popup AddCastParam
foreach (data_girls.girls girls in girlList)
{
	if (girls != null && girls.trait == traits._trait._type.Meme_queen)
	{
		Shows._param._media_type? media_type = this.medium.media_type;
		Shows._param._media_type media_type2 = Shows._param._media_type.internet;
		if (media_type.GetValueOrDefault() == media_type2 & media_type != null)
		{
			param.val += 10f;
		}
	}
}

Show_Popup SetParam
this.UpdateCastParams();

Shows._show SetStamina
int annoy = 0;
foreach (data_girls.girls girls in cast)
{
	if (girls != null && girls.trait == traits._trait._type.Annoying && girls.IsActive())
	{
		annoy++;
	}
}
foreach (data_girls.girls girls2 in cast)
{
	if (girls2.IsActive())
	{
		if (annoy == 1)
		{
			if (girls2.trait != traits._trait._type.Annoying)
			{
				girls2.addParam(data_girls._paramType.physicalStamina, -staminaCost * 1.2f, false);
			}
			else
			{
				girls2.addParam(data_girls._paramType.physicalStamina, -staminaCost, false);
			}
		}
		else if (annoy > 1)
		{
			girls2.addParam(data_girls._paramType.physicalStamina, -staminaCost * 1.2f, false);
		}
		else
		{
			girls2.addParam(data_girls._paramType.physicalStamina, -staminaCost, false);
		}
		if (num != 0f)
		{
			girls2.addParam(data_girls._paramType.mentalStamina, num, false);
		}
		if (this.castType != Shows._show._castType.entireGroup)
		{
			girls2.AddTrainingPoints(data_girls._paramType.funny, 1f);
			girls2.AddTrainingPoints(data_girls._paramType.smart, 1f);
		}
	}
}

singles._param GetSuccessChance
if (Single != null)
{
	bool flag = false;
	foreach (data_girls.girls girls in Single.girls)
	{
		if (girls != null && girls.trait == traits._trait._type.Meme_queen)
		{
			flag = true;
		}
	}
	if (flag)
	{
		if (Result == Single_Marketing_Roll._result.success)
		{
			f = 19f + (float)(Level * 2);
		}
		else if (Result == Single_Marketing_Roll._result.success_crit)
		{
			f = 15f;
		}
		else if (Result == Single_Marketing_Roll._result.fail_crit)
		{
			f = 10f;
		}
	}
}

singles ReleaseSingle
foreach (data_girls.girls girls in single.girls)
{
	if (girls != null)
	{
		if (girls.trait == traits._trait._type.Misandry && single.IsGroupHS() && mainScript.chance(20))
		{
			girls.AddAppeal(resources.fanType.male, -1f);
		}
		else if (girls.trait == traits._trait._type.Misandry && single.IsIndividualHS() && mainScript.chance(20))
		{
			girls.AddAppeal(resources.fanType.male, -1f);
		}
	}
}

singles._single SenbatsuCalcParam
foreach (data_girls.girls girls in girlsInARow)
{
	if (girls != null)
	{
		num5 += girls.getParam(type).val;
		int ind = 0;
		using (List<SEvent_Tour.tour>.Enumerator enumerator3 = SEvent_Tour.Tours.GetEnumerator())
		{
			while (enumerator3.MoveNext())
			{
				if (enumerator3.Current.Status == SEvent_Tour.tour._status.normal)
				{
					ind++;
				}
			}
		}
		using (List<SEvent_SSK._SSK>.Enumerator enumerator4 = SEvent_SSK.Elections.GetEnumerator())
		{
			while (enumerator4.MoveNext())
			{
				if (enumerator4.Current.Status == SEvent_Tour.tour._status.normal)
				{
					ind++;
				}
			}
		}
		using (List<SEvent_Concerts._concert>.Enumerator enumerator5 = SEvent_Concerts.Concerts.GetEnumerator())
		{
			while (enumerator5.MoveNext())
			{
				if (enumerator5.Current.Status == SEvent_Tour.tour._status.normal)
				{
					ind++;
				}
			}
		}
		if (girls != null && girls.trait == traits._trait._type.Anxiety && data_girls.IsStatParam(type) && num5 > 0f)
		{
			num5 -= 10f;
		}
		if (girls != null && girls.trait == traits._trait._type.Clumsy && type == data_girls._paramType.dance)
		{
			num5 -= 30f;
		}
		if (girls != null && girls.trait == traits._trait._type.Clumsy && type == data_girls._paramType.funny)
		{
			num5 += 30f;
		}
		if (girls != null && girls.trait == traits._trait._type.Worrier && resources.GetScandalPointsTotal() > 0L && data_girls.IsStatParam(type))
		{
			num5 -= 20f;
		}
		singles._single single = singles.GetLatestReleasedSingle(false, girls.GetGroup());
		singles._single single2 = singles.GetLatestReleasedSingle(false, Groups.GetMainGroup());
		singles._single single3 = null;
		if (single == null)
		{
			single = single2;
		}
		if (single != null)
		{
			if (single.ReleaseData.ReleaseDate > single2.ReleaseData.ReleaseDate)
			{
				single3 = single;
			}
			else if (single.ReleaseData.ReleaseDate < single2.ReleaseData.ReleaseDate)
			{
				single3 = single2;
			}
			else if (single.ReleaseData.Sales > single2.ReleaseData.Sales)
			{
				single3 = single;
			}
			else
			{
				single3 = single2;
			}
		}
		if (single != null && girls != null && girls.trait == traits._trait._type.Complacent && (girls == single.GetCenter() || girls == single2.GetCenter()) && (type == data_girls._paramType.vocal || type == data_girls._paramType.dance))
		{
			num5 -= 20f;
		}
		if (single3 != null && girls != null && (staticVars.dateTime - single3.ReleaseData.ReleaseDate).Days >= staticVars.dateTime.Day && single3.ReleaseData.Chart_Position != 1 && data_girls.IsStatParam(type))
		{
			if (girls.trait == traits._trait._type.Defeatist)
			{
				num5 -= 20f;
			}
			else if (girls.trait == traits._trait._type.Underdog)
			{
				num5 += 20f;
			}
		}
		if (num5 < 0f)
		{
			num5 = 0f;
		}
	}
}

SEvent_Tour FinishTour
foreach (data_girls.girls girls in activeGirls)
{
	if (girls.trait == traits._trait._type.Perfectionist && num < 0L)
	{
		girls.getParam(data_girls._paramType.mentalStamina).add(-20f, false);
	}
	girls.Earn(val);
}

SEvent_Concerts._concert Finish
foreach (data_girls.girls girls in this.GetGirls(true))
{
	if (girls.trait == traits._trait._type.Perfectionist && this.Hype < 100f)
	{
		girls.getParam(data_girls._paramType.mentalStamina).add(-20f, false);
	}
}

SEvent_Concerts._song GetSkillValue
int ind = 0;
using (List<SEvent_Tour.tour>.Enumerator enumerator = SEvent_Tour.Tours.GetEnumerator())
{
	while (enumerator.MoveNext())
	{
		if (enumerator.Current.Status == SEvent_Tour.tour._status.normal)
		{
			ind++;
		}
	}
}
using (List<SEvent_SSK._SSK>.Enumerator enumerator2 = SEvent_SSK.Elections.GetEnumerator())
{
	while (enumerator2.MoveNext())
	{
		if (enumerator2.Current.Status == SEvent_Tour.tour._status.normal)
		{
			ind++;
		}
	}
}
using (List<SEvent_Concerts._concert>.Enumerator enumerator3 = SEvent_Concerts.Concerts.GetEnumerator())
{
	while (enumerator3.MoveNext())
	{
		if (enumerator3.Current.Status == SEvent_Tour.tour._status.normal)
		{
			ind++;
		}
	}
}
float val = this.Center.getParam(data_girls._paramType.dance).val;
float val2 = this.Center.getParam(data_girls._paramType.vocal).val;
if (this.Center != null && this.Center.trait == traits._trait._type.Anxiety && ind > 0)
{
	val -= 10f;
	val2 -= 10f;
}
if (this.Center != null && this.Center.trait == traits._trait._type.Clumsy)
{
	val -= 30f;
}
if (this.Center != null && this.Center.trait == traits._trait._type.Worrier && resources.GetScandalPointsTotal() > 0L)
{
	val -= 20f;
	val2 -= 20f;
}
singles._single single = singles.GetLatestReleasedSingle(false, this.Center.GetGroup());
singles._single single2 = singles.GetLatestReleasedSingle(false, Groups.GetMainGroup());
singles._single single3 = null;
if (single == null)
{
	single = single2;
}
if (single != null)
{
	if (single.ReleaseData.ReleaseDate > single2.ReleaseData.ReleaseDate)
	{
		single3 = single;
	}
	else if (single.ReleaseData.ReleaseDate < single2.ReleaseData.ReleaseDate)
	{
		single3 = single2;
	}
	else if (single.ReleaseData.Sales > single2.ReleaseData.Sales)
	{
		single3 = single;
	}
	else
	{
		single3 = single2;
	}
}
if (single != null && this.Center != null && this.Center.trait == traits._trait._type.Complacent && (this.Center == single.GetCenter() || this.Center == single2.GetCenter()))
{
	val -= 20f;
	val2 -= 20f;
}
if (single3 != null && this.Center != null && (staticVars.dateTime - single3.ReleaseData.ReleaseDate).Days >= staticVars.dateTime.Day && single3.ReleaseData.Chart_Position != 1)
{
	if (this.Center.trait == traits._trait._type.Defeatist)
	{
		val -= 20f;
		val2 -= 20f;
	}
	else if (this.Center.trait == traits._trait._type.Underdog)
	{
		val += 20f;
		val2 += 20f;
	}
}
if (val < 1f)
{
	val = 1f;
}
if (val2 < 1f)
{
	val2 = 1f;
}
int num = Mathf.FloorToInt((0f + val + val2) / 2f);

SEvent_Concerts._mc GetSkillValue
float val = girls.getParam(data_girls._paramType.smart).val;
float val2 = girls.getParam(data_girls._paramType.funny).val;
int ind = 0;
using (List<SEvent_Tour.tour>.Enumerator enumerator2 = SEvent_Tour.Tours.GetEnumerator())
{
	while (enumerator2.MoveNext())
	{
		if (enumerator2.Current.Status == SEvent_Tour.tour._status.normal)
		{
			ind++;
		}
	}
}
using (List<SEvent_SSK._SSK>.Enumerator enumerator3 = SEvent_SSK.Elections.GetEnumerator())
{
	while (enumerator3.MoveNext())
	{
		if (enumerator3.Current.Status == SEvent_Tour.tour._status.normal)
		{
			ind++;
		}
	}
}
using (List<SEvent_Concerts._concert>.Enumerator enumerator4 = SEvent_Concerts.Concerts.GetEnumerator())
{
	while (enumerator4.MoveNext())
	{
		if (enumerator4.Current.Status == SEvent_Tour.tour._status.normal)
		{
			ind++;
		}
	}
}
if (girls != null && girls.trait == traits._trait._type.Anxiety && ind > 0)
{
	val -= 10f;
	val2 -= 10f;
}
if (girls != null && girls.trait == traits._trait._type.Clumsy)
{
	val2 += 30f;
}
if (girls != null && girls.trait == traits._trait._type.Worrier && resources.GetScandalPointsTotal() > 0L)
{
	val -= 20f;
	val2 -= 20f;
}
singles._single single = singles.GetLatestReleasedSingle(false, girls.GetGroup());
singles._single single2 = singles.GetLatestReleasedSingle(false, Groups.GetMainGroup());
singles._single single3 = null;
if (single == null)
{
	single = single2;
}
if (single != null)
{
	if (single.ReleaseData.ReleaseDate > single2.ReleaseData.ReleaseDate)
	{
		single3 = single;
	}
	else if (single.ReleaseData.ReleaseDate < single2.ReleaseData.ReleaseDate)
	{
		single3 = single2;
	}
	else if (single.ReleaseData.Sales > single2.ReleaseData.Sales)
	{
		single3 = single;
	}
	else
	{
		single3 = single2;
	}
}
if (single3 != null && girls != null && (staticVars.dateTime - single3.ReleaseData.ReleaseDate).Days >= staticVars.dateTime.Day && single3.ReleaseData.Chart_Position != 1)
{
	if (girls.trait == traits._trait._type.Defeatist)
	{
		val -= 20f;
		val2 -= 20f;
	}
	else if (girls.trait == traits._trait._type.Underdog)
	{
		val += 20f;
		val2 += 20f;
	}
}
if (val < 1f)
{
	val = 1f;
}
if (val2 < 1f)
{
	val2 = 1f;
}
num = (val + val2)/2f;